import type { Params } from "./type";

export const englishTextMap = {
  activityList: {
    title: "Activity List",
    createNew: "Create New Activity",
    loadingActivities: "Loading activities...",
    activitiesError: "Error loading activities",
    activitiesEmpty: "No activities found.",
    filters: {
      name: {
        title: "Name",
        placeholder: "Activity Name",
      },
      area: {
        title: "Area",
        placeholder: "Select Area",
        sports: "Sports",
        gym: "Gym",
        water: "Water Sports",
      },
      frequency: {
        title: "Frequency",
        placeholder: "Select Frequency",
        daily: "Daily",
        weekly: "Weekly",
        monthly: "Monthly",
      },
    },
    card: {
      area: "Area:",
      frequency: "Frequency:",
      teacher: "Teacher:",
    },
  },
  classes: {
    title: "My Classes",
    loadingClasses: "Loading classes...",
    classesError: "Error loading classes",
    createClass: "Create class",
    weekDay: "Weekday",
    schedule: "Schedule",
    level: "Level",
  },
  dateInput: {
    selectDate: "Select date",
  },
  filters: {
    loading: "Loading filters...",
    all: "All",
    race: {
      title: "Race",
      white: "White",
      black: "Black",
      brown: "Brown",
      yellow: "Asian",
      indigenous: "Indigenous",
      notDeclared: "Not Declared",
    },
    gender: {
      title: "Gender",
      male: "Male",
      female: "Female",
      other: "Other",
    },
    socialPrograms: {
      title: "Social Programs",
      bolsaFamilia: "Bolsa Fam√≠lia",
      bpcLoas: "BPC/LOAS",
      tarifaSocialDeEnergia: "Social Energy Tariff",
      auxilioGas: "Gas Aid",
      programaEstadual: "State Program",
      programaMunicipalViaCras: "Municipal Program via CRAS",
    },
    employmentStatus: {
      title: "Employment Status",
      employed: "Employed",
      unemployed: "Unemployed",
      student: "Student",
      other: "Other",
    },
    educationLevel: {
      title: "Education Level",
      none: "None",
      literate: "Literate",
      incompleteElementary: "Elementary Incomplete",
      completeElementary: "Elementary Complete",
      incompleteHighSchool: "High School Incomplete",
      completeHighSchool: "High School Complete",
      incompleteHigher: "Higher Education Incomplete",
      completeHigher: "Higher Education Complete",
      posGraduation: "Post-Graduation",
    },
    identityTypes: {
      title: "Document Type",
      rg: "RG",
      cpf: "CPF",
      birthCertificate: "Birth Certificate",
    },
    documentTypes: {
      title: "Document Type",
      residenceProof: "Proof of Residence",
      incomeProof: "Proof of Income",
      other: "Other",
    },
    weekDays: {
      title: "Week Day",
      monday: "Monday",
      tuesday: "Tuesday",
      wednesday: "Wednesday",
      thursday: "Thursday",
      friday: "Friday",
      saturday: "Saturday",
      sunday: "Sunday",
    },
    levels: {
      title: "Level",
      beginner: "Beginner",
      intermediate: "Intermediate",
      advanced: "Advanced",
      allLevels: "All Levels",
    },
    civilStates: {
      title: "Civil Status",
      single: "Single",
      married: "Married",
      divorced: "Divorced",
      widowed: "Widowed",
    },
  },
  frequency: {
    title: "Take Attendance",
    loadingActivities: "Loading activities...",
    activitiesError: "Error loading activities",
  },
  frequencyCall: {
    title: ({ activity, classTitle }: Params<"activity" | "classTitle">) => (
      `Attendance - ${activity} - ${classTitle}`
    ),
    save: "Save",
    loadingStudents: "Loading students...",
    studentsError: "Error loading students",
    errorNoStudents: "Error saving attendance, students not found",
    errorNoDate: "Error saving attendance, please enter a date",
    successSave: "Attendance recorded successfully",
  },
  frequencyCard: {
    absentDetails: "Add Observation",
    frequency: ({ percent }: Params<"percent">) => (
      `Attendance: ${percent}%`
    ),
  },
  frequencyClasses: {
    title: ({ activity }: Params<"activity">) => `Take Attendance - ${activity}`,
    loadingClasses: "Loading classes...",
    classesError: "Error loading classes",
    noClasses: "No classes found for this activity.",
    goBack: "Back to Activities",
  },
  header: {
    goToHome: "Go to home page",
    logoAlt: "WimBelemDon logo",
  },
  home: {
    welcomeBack: "Welcome back",
  },
  newResponsibleModal: {
    title: "Register Guardian",
    buttonText: "Add Guardian",
    inputs: {
      name: "Name",
      namePlaceholder: "Enter guardian's name",
      cpf: "CPF",
      cpfPlaceholder: "Enter guardian's CPF",
      birthDate: "Date of Birth",
      birthDatePlaceholder: "Enter guardian's date of birth",
      civilState: "Civil Status",
      civilStatePlaceholder: "Select guardian's civil status",
      nis: "NIS",
      nisPlaceholder: "Enter guardian's NIS",
      address: "Address",
      addressPlaceholder: "Enter guardian's address",
      phone: "Phone",
      phonePlaceholder: "Enter guardian's phone",
      email: "Email",
      emailPlaceholder: "Enter guardian's email",
    },
    successMessage: "Guardian added successfully!",
    pleaseFillAllFields: "Please fill in all fields.",
  },
  personCard: {
    userImageAlt: "User image",
    name: "Name:",
    cpf: "CPF:",
    birthDate: "Birth Date:",
    civilState: "Civil Status:",
    nis: "NIS:",
    phone: "Phone:",
    email: "Email:",
    address: "Address:",
    editButton: "Edit",
  },
  sidebar: {
    openSidebar: "Open sidebar menu",
    listIcon: ({ to }: Params<"to">) => (
      `Navigate to ${to} page`
    ),
  },
  studentRegistration: {
    personalInformation: "Personal Information",
    name: "Name",
    namePlaceholder: "Full name",
    dateOfBirth: "Date of Birth",
    address: {
      zipCode: "ZIP Code",
      zipCodePlaceholder: "xxxxxxxx",
      street: "Street",
      number: "Number",
      numberPlaceholder: "Number",
      complement: "Complement",
      complementPlaceholder: "Apartment, block, house, etc.",
    },
    enrollmentDate: "Registration Date",
    documents: "Documents",
    registrationNumber: "Identity Document (CPF)",
    attachments: "Attachments",
    attachMoreFiles: "Attach more documents",
    selectFiles: "Select file",
    selectedFile: "Selected file:",
    fileCreatedAt: "File creation date:",
    fileDescription: "File description",
    cancelFileSend: "Cancel file upload",
    addFileButton: "Add file",
    toggleStudentStatusOn: "Activate student",
    toggleStudentStatusOff: "Deactivate student",
    details: "Details",
    schoolName: "Current School",
    schoolNamePlaceholder: "Enter student's current school",
    saveButton: "Save",
    cancelButton: "Cancel",
    successMessage: "Student registered successfully!",
    errorMessage: "Error registering student. Please try again.",
  },
  students: {
    title: "Students",
    createNew: "Create New Student",
    createResponsible: "Create Guardian",
    loadingStudents: "Loading students...",
    studentsError: "Error loading students",
    noStudents: "No students found",
  },
  studentsResponsibles: {
    title: "Guardians",
    loadingResponsibles: "Loading guardians...",
    responsiblesError: "Error loading guardians",
    noResponsibles: "No guardians found",
    registerResponsible: "Register Guardian",
  },
  techDemo: {
    title: "Tech Demo",
    fetching: "Updating...",
    showAPIInfo: "Show API information",
    children: {
      mockAPI: {
        detail: ({ c2 }: Params<"c2">) => (
          `Received a URL parameter: ${c2}`
        ),
        apiError: ({ message }: Params<"message">) => (
          `API Error: ${message}`
        ),
      },
    }
  },
  textCard: {
    exploreHome: "Visit Home Page",
  },
  toast: {
    success: ({ message }: Params<"message">) => (`Success: ${message}`),
    error: ({ message }: Params<"message">) => (`Error: ${message}`),
    info: ({ message }: Params<"message">) => (`Info: ${message}`),
    warning: ({ message }: Params<"message">) => (`Warning: ${message}`),
  },
  userProfile: {
    login: "Sign in with Google",
    logout: "Sign out",
  },
  users: {
    title: "Manage Users",
    loadingUsers: "Loading users...",
    usersError: "Error loading users",
  },
} as const;
